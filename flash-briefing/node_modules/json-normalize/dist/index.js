'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _assign=require('babel-runtime/core-js/object/assign');var _assign2=_interopRequireDefault(_assign);var _bluebird=require('bluebird');var _typeof2=require('babel-runtime/helpers/typeof');var _typeof3=_interopRequireDefault(_typeof2);var _keys=require('babel-runtime/core-js/object/keys');var _keys2=_interopRequireDefault(_keys);var _stringify=require('babel-runtime/core-js/json/stringify');var _stringify2=_interopRequireDefault(_stringify);var _sourceMapSupport2=require('source-map-support');exports.normalize=normalize;exports.normalizeSync=normalizeSync;exports.stringify=stringify;exports.stringifySync=stringifySync;exports.hash=hash;exports.md5=md5;exports.sha256=sha256;exports.sha512=sha512;exports.md5Sync=md5Sync;exports.sha256Sync=sha256Sync;exports.sha512Sync=sha512Sync;var _crypto=require('crypto');var _crypto2=_interopRequireDefault(_crypto);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(0,_sourceMapSupport2.install)();function handleLiteral(recurse,value,done){var error=null;var results=void 0;try{results=(0,_stringify2.default)(value)}catch(e){error=e}return done(error,results)}function handleObject(recurse,obj,replacer,done){var keys=(0,_keys2.default)(obj);var isArray=obj instanceof Array;var handledError=null;var complete=0;var values=[];var onComplete=function onComplete(){return done(null,isArray?'['+values.map(function(v){return v===null?'null':v}).join(',')+']':'{'+values.sort().filter(Boolean).join(',')+'}')};var onSerialized=function onSerialized(e,value,index){if(handledError){return null}else if(e){handledError=e;return done(e)}values[index]=typeof value==='undefined'?null:value;if(++complete!==keys.length)return null;return onComplete()};var mapArray=function mapArray(key,index){return recurse(typeof obj[key]==='undefined'?null:obj[key],replacer,function(e,val){return onSerialized(e,val,index)},key)};var mapObject=function mapObject(key,index){return typeof obj[key]==='undefined'?onSerialized(null,null):recurse(obj[key],replacer,function(e,val){return onSerialized(e,typeof val==='undefined'?null:'"'+key+'":'+val,index)},key)};return keys.length===0?onComplete():keys.map(isArray?mapArray:mapObject)}function handleReplacer(val,key,replacer){var value=val;var onValue=replacer;if(typeof onValue==='function'){value=onValue(key,value);onValue=(typeof value==='undefined'?'undefined':(0,_typeof3.default)(value))==='object'?onValue:undefined}else if(typeof value==='function'){value=undefined}return{value:value,onValue:onValue}}function serialize(obj,replacer,complete,key){var replacerFunction=replacer;var done=complete;if(typeof done==='undefined'&&typeof replacerFunction==='function'){replacerFunction=undefined;done=replacer}if(typeof done!=='function')return;var _handleReplacer=handleReplacer(obj,key,replacerFunction),value=_handleReplacer.value,onValue=_handleReplacer.onValue;process.nextTick(function(){return!value||(typeof value==='undefined'?'undefined':(0,_typeof3.default)(value))!=='object'?handleLiteral(serialize,value,done):handleObject(serialize,value,onValue,done)})}function serializeSync(obj,replacer,complete,key){var done=complete;var results=void 0;if(typeof done!=='function')done=function done(err,value){results=value};var _handleReplacer2=handleReplacer(obj,key,replacer),value=_handleReplacer2.value,onValue=_handleReplacer2.onValue;if(!value||(typeof value==='undefined'?'undefined':(0,_typeof3.default)(value))!=='object'){handleLiteral(serializeSync,value,done)}else{handleObject(serializeSync,value,onValue,done)}return results}function normalize(obj,replacer,complete){return serialize(obj,replacer,complete)}function normalizeSync(obj,replacer){return serializeSync(obj,replacer)}function stringify(){return normalize.apply(undefined,arguments)}function stringifySync(){return normalizeSync.apply(undefined,arguments)}function hash(input){var algorithm=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'md5';return _crypto2.default.createHash(algorithm).update(input).digest('hex')}function md5(input,done){if(typeof done!=='function')return;serialize(input,function(e,serialized){return done(e||null,e?undefined:hash(serialized,'md5'))})}function sha256(input,done){if(typeof done!=='function')return;serialize(input,function(e,serialized){return done(e||null,e?undefined:hash(serialized,'sha256'))})}function sha512(input,done){if(typeof done!=='function')return;serialize(input,function(e,serialized){return done(e||null,e?undefined:hash(serialized,'sha512'))})}function md5Sync(input){return hash(serializeSync(input),'md5')}function sha256Sync(input){return hash(serializeSync(input),'sha256')}function sha512Sync(input){return hash(serializeSync(input),'sha512')}var promisified=(0,_bluebird.promisifyAll)({normalize:normalize,stringify:stringify,md5:md5,sha256:sha256,sha512:sha512});(0,_assign2.default)(exports,promisified);exports.default=exports;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJub3JtYWxpemUiLCJub3JtYWxpemVTeW5jIiwic3RyaW5naWZ5Iiwic3RyaW5naWZ5U3luYyIsImhhc2giLCJtZDUiLCJzaGEyNTYiLCJzaGE1MTIiLCJtZDVTeW5jIiwic2hhMjU2U3luYyIsInNoYTUxMlN5bmMiLCJoYW5kbGVMaXRlcmFsIiwicmVjdXJzZSIsInZhbHVlIiwiZG9uZSIsImVycm9yIiwicmVzdWx0cyIsImUiLCJoYW5kbGVPYmplY3QiLCJvYmoiLCJyZXBsYWNlciIsImtleXMiLCJpc0FycmF5IiwiQXJyYXkiLCJoYW5kbGVkRXJyb3IiLCJjb21wbGV0ZSIsInZhbHVlcyIsIm9uQ29tcGxldGUiLCJtYXAiLCJ2Iiwiam9pbiIsInNvcnQiLCJmaWx0ZXIiLCJCb29sZWFuIiwib25TZXJpYWxpemVkIiwiaW5kZXgiLCJsZW5ndGgiLCJtYXBBcnJheSIsImtleSIsInZhbCIsIm1hcE9iamVjdCIsImhhbmRsZVJlcGxhY2VyIiwib25WYWx1ZSIsInVuZGVmaW5lZCIsInNlcmlhbGl6ZSIsInJlcGxhY2VyRnVuY3Rpb24iLCJwcm9jZXNzIiwibmV4dFRpY2siLCJzZXJpYWxpemVTeW5jIiwiZXJyIiwiaW5wdXQiLCJhbGdvcml0aG0iLCJjcmVhdGVIYXNoIiwidXBkYXRlIiwiZGlnZXN0Iiwic2VyaWFsaXplZCIsInByb21pc2lmaWVkIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6ImtrQkE0SmdCQSxTLENBQUFBLFMsU0FZQUMsYSxDQUFBQSxhLFNBWUFDLFMsQ0FBQUEsUyxTQVlBQyxhLENBQUFBLGEsU0FVQUMsSSxDQUFBQSxJLFNBVUFDLEcsQ0FBQUEsRyxTQVdBQyxNLENBQUFBLE0sU0FXQUMsTSxDQUFBQSxNLFNBV0FDLE8sQ0FBQUEsTyxTQVVBQyxVLENBQUFBLFUsU0FVQUMsVSxDQUFBQSxVLENBelFoQiw4QixnS0FXQSxRQUFTQyxjQUFULENBQXVCQyxPQUF2QixDQUFnQ0MsS0FBaEMs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QUEyQixDQUNoQyxNQUFPOUMsTUFBSzRDLGNBQWNFLEtBQWQsQ0FBTCxDQUEyQixRQUEzQixDQUNSLENBR0QsR0FBTU0sYUFBYywyQkFBcUIsQ0FBRXhELG1CQUFGLENBQWFFLG1CQUFiLENBQXdCRyxPQUF4QixDQUE2QkMsYUFBN0IsQ0FBcUNDLGFBQXJDLENBQXJCLENBQXBCLENBRUEscUJBQWNrRCxPQUFkLENBQXVCRCxXQUF2QixFLGdCQUNlQyxPIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyeXB0byBmcm9tICdjcnlwdG8nO1xuXG4vKipcbiAqIFVzZWQgYnkgc2VyaWFsaXplIHRvIGhhbmRsZSBsaXRlcmFsIHZhbHVlcy5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHJlY3Vyc2UgVGhlIHNlcmlhbGl6ZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBmb3IgdGhlIGN1cnJlbnQgdmFsdWUgKGlmIG9uZSBleGlzdHMpLlxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfGJvb2xlYW58bnVsbH0gdmFsdWUgVGhlIGxpdGVyYWwgdG8gcGFyc2UuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufHVuZGVmaW5lZH0gcmVwbGFjZXIgVGhlIHJlcGxhY2VyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gZG9uZSBBIGNhbGxiYWNrIGZvciBjb21wbGV0aW9uLlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIEpTT04uc3RyaW5naWZpZWQgbGl0ZXJhbCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gaGFuZGxlTGl0ZXJhbChyZWN1cnNlLCB2YWx1ZSwgZG9uZSkge1xuICBsZXQgZXJyb3IgPSBudWxsO1xuICBsZXQgcmVzdWx0cztcblxuICAvLyBBdHRlbXB0IHRvIEpTT04gcGFyc2UgbGl0ZXJhbCB2YWx1ZVxuICB0cnkgeyByZXN1bHRzID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpOyB9IGNhdGNoIChlKSB7IGVycm9yID0gZTsgfVxuICByZXR1cm4gZG9uZShlcnJvciwgcmVzdWx0cyk7XG59XG5cbi8qKlxuICogVXNlZCBieSBzZXJpYWxpemUgdG8gYXJyYXkgYW5kIHBsYWluIG9iamVjdCB2YWx1ZXMuXG4gKiBAcGFyYW0ge29iamVjdHxBcnJheX0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcHJvY2Vzcy5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHJlY3Vyc2UgVGhlIHNlcmlhbGl6ZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7ZnVuY3Rpb258dW5kZWZpbmVkfSByZXBsYWNlciBUaGUgcmVwbGFjZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBkb25lIEEgY2FsbGJhY2sgZm9yIGNvbXBsZXRpb24uXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgSlNPTi5zdHJpbmdpZmllZCBvYmplY3QgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGhhbmRsZU9iamVjdChyZWN1cnNlLCBvYmosIHJlcGxhY2VyLCBkb25lKSB7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICBjb25zdCBpc0FycmF5ID0gb2JqIGluc3RhbmNlb2YgQXJyYXk7XG4gIGxldCBoYW5kbGVkRXJyb3IgPSBudWxsO1xuICBsZXQgY29tcGxldGUgPSAwO1xuICBjb25zdCB2YWx1ZXMgPSBbXTtcblxuICBjb25zdCBvbkNvbXBsZXRlID0gKCkgPT4gZG9uZShudWxsLCBpc0FycmF5XG4gICAgPyBgWyR7dmFsdWVzLm1hcCh2ID0+ICh2ID09PSBudWxsID8gJ251bGwnIDogdikpLmpvaW4oJywnKX1dYFxuICAgIDogYHske3ZhbHVlcy5zb3J0KCkuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJywnKX19YCk7XG5cbiAgLy8gV2hlbiBhbiBvYmplY3Qga2V5IGlzIHNlcmlhbGl6ZWQsIGl0IGNhbGxzIHRoaXMgbWV0aG9kIGFzIGl0cyBjYWxsYmFjay5cbiAgY29uc3Qgb25TZXJpYWxpemVkID0gKGUsIHZhbHVlLCBpbmRleCkgPT4ge1xuICAgIGlmIChoYW5kbGVkRXJyb3IpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSBpZiAoZSkge1xuICAgICAgaGFuZGxlZEVycm9yID0gZTtcbiAgICAgIHJldHVybiBkb25lKGUpO1xuICAgIH1cblxuICAgIHZhbHVlc1tpbmRleF0gPSB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IHZhbHVlO1xuICAgIGlmICgrK2NvbXBsZXRlICE9PSBrZXlzLmxlbmd0aCkgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIG9uQ29tcGxldGUoKTtcbiAgfTtcblxuICAvLyBTZXJpYWxpemVzIGVhY2ggaXRlbSBpbiBhbiBhcnJheS5cbiAgY29uc3QgbWFwQXJyYXkgPSAoa2V5LCBpbmRleCkgPT5cbiAgICByZWN1cnNlKHR5cGVvZiBvYmpba2V5XSA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogb2JqW2tleV0sIHJlcGxhY2VyLCAoZSwgdmFsKSA9PiBvblNlcmlhbGl6ZWQoZSwgdmFsLCBpbmRleCksIGtleSk7XG5cbiAgLy8gU2VyaWFsaXplcyBlYWNoIGl0ZW0gaW4gYW4gb2JqZWN0LlxuICBjb25zdCBtYXBPYmplY3QgPSAoa2V5LCBpbmRleCkgPT4gKHR5cGVvZiBvYmpba2V5XSA9PT0gJ3VuZGVmaW5lZCdcbiAgICA/IG9uU2VyaWFsaXplZChudWxsLCBudWxsKVxuICAgIDogcmVjdXJzZShvYmpba2V5XSwgcmVwbGFjZXIsIChlLCB2YWwpID0+IG9uU2VyaWFsaXplZChlLCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiBgXCIke2tleX1cIjoke3ZhbH1gLCBpbmRleCksIGtleSkpO1xuXG4gIC8vIE1hcCB0aGUgb2JqZWN0J3Mga2V5cyB0byBpdHMgcmVzcGVjdGl2ZSBvYmplY3QgdHlwZSBmdW5jdGlvblxuICByZXR1cm4ga2V5cy5sZW5ndGggPT09IDBcbiAgICA/IG9uQ29tcGxldGUoKVxuICAgIDoga2V5cy5tYXAoaXNBcnJheSA/IG1hcEFycmF5IDogbWFwT2JqZWN0KTtcbn1cblxuLyoqXG4gKiBIYW5kbGVzIGNhbGxpbmcgdGhlIFwicmVwbGFjZXJcIiBhcmd1bWVudCB0byBib3RoIHRoZSBcInNlcmlhbGl6ZVwiIGFuZCBcInNlcmlhbGl6ZVN5bmNcIiBtZXRob2RzLlxuICogQHBhcmFtIHthbnl9IHZhbCBUaGUgdmFsdWUgdG8gcGFzcyB0byB0aGUgcmVwbGFjZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgYXJndW1lbnQgdG8gcGFzcyB0byB0aGUgcmVwbGFjZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufHVuZGVmaW5lZH0gcmVwbGFjZXIgVGhlIHJlcGxhY2VyIGZ1bmN0aW9uIHRvIGNhbGwuXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgbmV3IHZhbHVlLCBhbmQgXCJuZXdcIiByZXBsYWNlciBmdW5jdGlvbiB0byBwYXNzIGFsb25nXG4gKiBpbiByZWdhcmQgdG8gcmVjdXJzaW9uLlxuICovXG5mdW5jdGlvbiBoYW5kbGVSZXBsYWNlcih2YWwsIGtleSwgcmVwbGFjZXIpIHtcbiAgbGV0IHZhbHVlID0gdmFsO1xuICBsZXQgb25WYWx1ZSA9IHJlcGxhY2VyO1xuXG4gIGlmICh0eXBlb2Ygb25WYWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhbHVlID0gb25WYWx1ZShrZXksIHZhbHVlKTtcbiAgICBvblZhbHVlID0gdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyA/IG9uVmFsdWUgOiB1bmRlZmluZWQ7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICByZXR1cm4geyB2YWx1ZSwgb25WYWx1ZSB9O1xufVxuXG4vKipcbiAqIFNlcmFsaXplcyBhbiBvYmplY3QgaW50byBcIm5vcm1hbGl6ZWQganNvblwiLCB3aGljaCBjYW4gYmUgdXNlZCBhcyBhIGtleSwgZXRjLlxuICogQHBhcmFtIHtvYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIHNlcmlhbGl6ZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb249fSByZXBsYWNlciBBIGZ1bmN0aW9uIHRoYXQncyBjYWxsZWQgZm9yIGVhY2ggaXRlbSwgbGlrZSB0aGUgcmVwbGFjZXJcbiAqIGZ1bmN0aW9uIHBhc3NlZCB0byBKU09OLnN0cmluZ2lmeS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbXBsZXRlIEEgY2FsbGJhY2sgZm9yIGNvbXBsZXRpb24uXG4gKiBAcGFyYW0ge3N0cmluZ3x1bmRlZmluZWR9IGtleSBUaGUgcGFyZW50IGtleSwgdXNlZCBpbiByZWN1cnNpb24gYnkgXCJoYW5kbGVPYmplY3RcIiBhbmQgcGFzc2VkXG4gKiB0byB0aGUgcmVwbGFjZXIgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICovXG5mdW5jdGlvbiBzZXJpYWxpemUob2JqLCByZXBsYWNlciwgY29tcGxldGUsIGtleSkge1xuICBsZXQgcmVwbGFjZXJGdW5jdGlvbiA9IHJlcGxhY2VyO1xuICBsZXQgZG9uZSA9IGNvbXBsZXRlO1xuXG4gIC8vIFJlYXJyYW5nZSBhcmd1ZW1lbnRzIGZvciByZXBsYWNlci9jb21wbGV0ZSBwYXJhbWV0ZXJzIGJhc2VkIG9uIHZhbHVlXG4gIGlmICh0eXBlb2YgZG9uZSA9PT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHJlcGxhY2VyRnVuY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXBsYWNlckZ1bmN0aW9uID0gdW5kZWZpbmVkO1xuICAgIGRvbmUgPSByZXBsYWNlcjtcbiAgfVxuXG4gIC8vIE5vIHJlYXNvbiB0byBjb250aW51ZSwgbm8gY2FsbGJhY2sgd2FzIHByb3ZpZGVkLlxuICBpZiAodHlwZW9mIGRvbmUgIT09ICdmdW5jdGlvbicpIHJldHVybjtcblxuICAvLyBTaW11bGF0ZXMgdGhlIEpTT04uc3RyaW5naWZ5IHJlcGxhY2VyIGZ1bmN0aW9uXG4gIGNvbnN0IHsgdmFsdWUsIG9uVmFsdWUgfSA9IGhhbmRsZVJlcGxhY2VyKG9iaiwga2V5LCByZXBsYWNlckZ1bmN0aW9uKTtcblxuICBwcm9jZXNzLm5leHRUaWNrKCgpID0+ICghdmFsdWUgfHwgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0J1xuICAgID8gaGFuZGxlTGl0ZXJhbChzZXJpYWxpemUsIHZhbHVlLCBkb25lKVxuICAgIDogaGFuZGxlT2JqZWN0KHNlcmlhbGl6ZSwgdmFsdWUsIG9uVmFsdWUsIGRvbmUpKSk7XG59XG5cbi8qKlxuICogU3luY3Jvbm91c2x5IHNlcmFsaXplcyBhbiBvYmplY3QgaW50byBcIm5vcm1hbGl6ZWQganNvblwiLCB3aGljaCBjYW4gYmUgdXNlZCBhcyBhIGtleSwgZXRjLlxuICogQHBhcmFtIHtvYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIHNlcmlhbGl6ZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb249fSByZXBsYWNlciBBIGZ1bmN0aW9uIHRoYXQncyBjYWxsZWQgZm9yIGVhY2ggaXRlbSwgbGlrZSB0aGUgcmVwbGFjZXJcbiAqIGZ1bmN0aW9uIHBhc3NlZCB0byBKU09OLnN0cmluZ2lmeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgXCJub3JtYWxpemVkIEpTT04gc3RyaW5nXCIsIHdoaWNoIGFsd2F5cyByZXR1cm5zIHRoZSBzYW1lIHN0cmluZywgaWYgcGFzc2VkXG4gKiB0aGUgc2FtZSBvYmplY3QsIHJlZ2FyZGxlc3Mgb2Yga2V5IG9yZGVyLlxuICovXG5mdW5jdGlvbiBzZXJpYWxpemVTeW5jKG9iaiwgcmVwbGFjZXIsIGNvbXBsZXRlLCBrZXkpIHtcbiAgbGV0IGRvbmUgPSBjb21wbGV0ZTtcbiAgbGV0IHJlc3VsdHM7XG5cbiAgLy8gQ3JlYXRlIGEgY2FsbGJhY2sgZm9yIHdoZW4gc3RyaW5naWZpY2F0aW9uIGlzIGNvbXBsZXRlXG4gIGlmICh0eXBlb2YgZG9uZSAhPT0gJ2Z1bmN0aW9uJykgZG9uZSA9IChlcnIsIHZhbHVlKSA9PiB7IHJlc3VsdHMgPSB2YWx1ZTsgfTtcblxuICAvLyBTaW11bGF0ZXMgdGhlIEpTT04uc3RyaW5naWZ5IHJlcGxhY2VyIGZ1bmN0aW9uXG4gIGNvbnN0IHsgdmFsdWUsIG9uVmFsdWUgfSA9IGhhbmRsZVJlcGxhY2VyKG9iaiwga2V5LCByZXBsYWNlcik7XG5cbiAgaWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG4gICAgaGFuZGxlTGl0ZXJhbChzZXJpYWxpemVTeW5jLCB2YWx1ZSwgZG9uZSk7XG4gIH0gZWxzZSB7XG4gICAgaGFuZGxlT2JqZWN0KHNlcmlhbGl6ZVN5bmMsIHZhbHVlLCBvblZhbHVlLCBkb25lKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHRzO1xufVxuXG4vKipcbiAqIEV4cG9ydGVkIHdyYXBwZXIgYXJvdW5kIHRoZSBzZXJpYWxpemUgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge29iamVjdH0gb2JqIFRoZSBvYmplY3QgdG8gc2VyaWFsaXplLlxuICogQHBhcmFtIHtmdW5jdGlvbj19IHJlcGxhY2VyIEEgZnVuY3Rpb24gdGhhdCdzIGNhbGxlZCBmb3IgZWFjaCBpdGVtLCBsaWtlIHRoZSByZXBsYWNlclxuICogZnVuY3Rpb24gcGFzc2VkIHRvIEpTT04uc3RyaW5naWZ5LlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY29tcGxldGUgQSBjYWxsYmFjayBmb3IgY29tcGxldGlvbi5cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemUob2JqLCByZXBsYWNlciwgY29tcGxldGUpIHtcbiAgcmV0dXJuIHNlcmlhbGl6ZShvYmosIHJlcGxhY2VyLCBjb21wbGV0ZSk7XG59XG5cbi8qKlxuICogRXhwb3J0ZWQgd3JhcHBlciBhcm91bmQgdGhlIHNlcmlhbGl6ZVN5bmMgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge29iamVjdH0gb2JqIFRoZSBvYmplY3QgdG8gc2VyaWFsaXplLlxuICogQHBhcmFtIHtmdW5jdGlvbj19IHJlcGxhY2VyIEEgZnVuY3Rpb24gdGhhdCdzIGNhbGxlZCBmb3IgZWFjaCBpdGVtLCBsaWtlIHRoZSByZXBsYWNlclxuICogZnVuY3Rpb24gcGFzc2VkIHRvIEpTT04uc3RyaW5naWZ5LlxuICogQHJldHVybnMge3N0cmluZ30gQSBcIm5vcm1hbGl6ZWQgSlNPTiBzdHJpbmdcIiwgd2hpY2ggYWx3YXlzIHJldHVybnMgdGhlIHNhbWUgc3RyaW5nLCBpZiBwYXNzZWRcbiAqIHRoZSBzYW1lIG9iamVjdCwgcmVnYXJkbGVzcyBvZiBrZXkgb3JkZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVTeW5jKG9iaiwgcmVwbGFjZXIpIHtcbiAgcmV0dXJuIHNlcmlhbGl6ZVN5bmMob2JqLCByZXBsYWNlcik7XG59XG5cbi8qKlxuICogQWxpYXMgZm9yIFwibm9ybWFsaXplXCIuXG4gKiBAcGFyYW0ge29iamVjdH0gb2JqIFRoZSBvYmplY3QgdG8gc2VyaWFsaXplLlxuICogQHBhcmFtIHtmdW5jdGlvbj19IHJlcGxhY2VyIEEgZnVuY3Rpb24gdGhhdCdzIGNhbGxlZCBmb3IgZWFjaCBpdGVtLCBsaWtlIHRoZSByZXBsYWNlclxuICogZnVuY3Rpb24gcGFzc2VkIHRvIEpTT04uc3RyaW5naWZ5LlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY29tcGxldGUgQSBjYWxsYmFjayBmb3IgY29tcGxldGlvbi5cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdpZnkoLi4uYXJncykge1xuICByZXR1cm4gbm9ybWFsaXplKC4uLmFyZ3MpO1xufVxuXG4vKipcbiAqIEFsaWFzIGZvciBcIm5vcm1hbGl6ZVN5bmNcIi5cbiAqIEBwYXJhbSB7b2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byBzZXJpYWxpemUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uPX0gcmVwbGFjZXIgQSBmdW5jdGlvbiB0aGF0J3MgY2FsbGVkIGZvciBlYWNoIGl0ZW0sIGxpa2UgdGhlIHJlcGxhY2VyXG4gKiBmdW5jdGlvbiBwYXNzZWQgdG8gSlNPTi5zdHJpbmdpZnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIFwibm9ybWFsaXplZCBKU09OIHN0cmluZ1wiLCB3aGljaCBhbHdheXMgcmV0dXJucyB0aGUgc2FtZSBzdHJpbmcsIGlmIHBhc3NlZFxuICogdGhlIHNhbWUgb2JqZWN0LCByZWdhcmRsZXNzIG9mIGtleSBvcmRlci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ2lmeVN5bmMoLi4uYXJncykge1xuICByZXR1cm4gbm9ybWFsaXplU3luYyguLi5hcmdzKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgaGFzaCBmb3IgdGhlIGdpdmVuIHN0cmluZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dCBUaGUgc3RyaW5nIHRvIGdldCB0aGUgaGFzaCBvZi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBhbGdvcml0aG0gVGhlIGFsZ29yaXRobSB0byB1c2UgdG8gcGVyZm9ybSB0aGUgaGFzaC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBoYXNoIGZvciB0aGUgZ2l2ZW4gc3RyaW5nL2Fsb2dyaXRobS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc2goaW5wdXQsIGFsZ29yaXRobSA9ICdtZDUnKSB7XG4gIHJldHVybiBjcnlwdG8uY3JlYXRlSGFzaChhbGdvcml0aG0pLnVwZGF0ZShpbnB1dCkuZGlnZXN0KCdoZXgnKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBtZDUgaGFzaCBmb3IgdGhlIEpTT04gbm9ybWFsaXplZCBvYmplY3QgcGFzc2VkIGluLlxuICogQHBhcmFtIHthbnl9IGlucHV0IFRoZSBpbnB1dCB0byBnZXQgdGhlIG1kNSBoYXNoIGZvci5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGRvbmUgQSBjYWxsYmFjayBmb3IgY29tcGxldGlvbi5cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtZDUoaW5wdXQsIGRvbmUpIHtcbiAgaWYgKHR5cGVvZiBkb25lICE9PSAnZnVuY3Rpb24nKSByZXR1cm47XG4gIHNlcmlhbGl6ZShpbnB1dCwgKGUsIHNlcmlhbGl6ZWQpID0+IGRvbmUoZSB8fCBudWxsLCBlID8gdW5kZWZpbmVkIDogaGFzaChzZXJpYWxpemVkLCAnbWQ1JykpKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzaGEyNTYgaGFzaCBmb3IgdGhlIEpTT04gbm9ybWFsaXplZCBvYmplY3QgcGFzc2VkIGluLlxuICogQHBhcmFtIHthbnl9IGlucHV0IFRoZSBpbnB1dCB0byBnZXQgdGhlIHNoYTI1NiBoYXNoIGZvci5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGRvbmUgQSBjYWxsYmFjayBmb3IgY29tcGxldGlvbi5cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaGEyNTYoaW5wdXQsIGRvbmUpIHtcbiAgaWYgKHR5cGVvZiBkb25lICE9PSAnZnVuY3Rpb24nKSByZXR1cm47XG4gIHNlcmlhbGl6ZShpbnB1dCwgKGUsIHNlcmlhbGl6ZWQpID0+IGRvbmUoZSB8fCBudWxsLCBlID8gdW5kZWZpbmVkIDogaGFzaChzZXJpYWxpemVkLCAnc2hhMjU2JykpKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzaGE1MTIgaGFzaCBmb3IgdGhlIEpTT04gbm9ybWFsaXplZCBvYmplY3QgcGFzc2VkIGluLlxuICogQHBhcmFtIHthbnl9IGlucHV0IFRoZSBpbnB1dCB0byBnZXQgdGhlIHNoYTUxMiBoYXNoIGZvci5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGRvbmUgQSBjYWxsYmFjayBmb3IgY29tcGxldGlvbi5cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaGE1MTIoaW5wdXQsIGRvbmUpIHtcbiAgaWYgKHR5cGVvZiBkb25lICE9PSAnZnVuY3Rpb24nKSByZXR1cm47XG4gIHNlcmlhbGl6ZShpbnB1dCwgKGUsIHNlcmlhbGl6ZWQpID0+IGRvbmUoZSB8fCBudWxsLCBlID8gdW5kZWZpbmVkIDogaGFzaChzZXJpYWxpemVkLCAnc2hhNTEyJykpKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBtZDUgaGFzaCBmb3IgdGhlIEpTT04gbm9ybWFsaXplZCBvYmplY3QgcGFzc2VkIGluLlxuICogQHBhcmFtIHthbnl9IGlucHV0IFRoZSBpbnB1dCB0byBnZXQgdGhlIG1kNSBoYXNoIGZvci5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGRvbmUgQSBjYWxsYmFjayBmb3IgY29tcGxldGlvbi5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IEFuIG1kNSBoYXNoIHJlcHJlc2VudGluZyB0aGUgZ2l2ZW4gb2JqZWN0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWQ1U3luYyhpbnB1dCkge1xuICByZXR1cm4gaGFzaChzZXJpYWxpemVTeW5jKGlucHV0KSwgJ21kNScpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHNoYTI1NiBoYXNoIGZvciB0aGUgSlNPTiBub3JtYWxpemVkIG9iamVjdCBwYXNzZWQgaW4uXG4gKiBAcGFyYW0ge2FueX0gaW5wdXQgVGhlIGlucHV0IHRvIGdldCB0aGUgc2hhMjU2IGhhc2ggZm9yLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gZG9uZSBBIGNhbGxiYWNrIGZvciBjb21wbGV0aW9uLlxuICogQHJldHVybnMge3N0cmluZ30gQW4gc2hhMjU2IGhhc2ggcmVwcmVzZW50aW5nIHRoZSBnaXZlbiBvYmplY3QuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaGEyNTZTeW5jKGlucHV0KSB7XG4gIHJldHVybiBoYXNoKHNlcmlhbGl6ZVN5bmMoaW5wdXQpLCAnc2hhMjU2Jyk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgc2hhNTEyIGhhc2ggZm9yIHRoZSBKU09OIG5vcm1hbGl6ZWQgb2JqZWN0IHBhc3NlZCBpbi5cbiAqIEBwYXJhbSB7YW55fSBpbnB1dCBUaGUgaW5wdXQgdG8gZ2V0IHRoZSBzaGE1MTIgaGFzaCBmb3IuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBkb25lIEEgY2FsbGJhY2sgZm9yIGNvbXBsZXRpb24uXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBbiBzaGE1MTIgaGFzaCByZXByZXNlbnRpbmcgdGhlIGdpdmVuIG9iamVjdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNoYTUxMlN5bmMoaW5wdXQpIHtcbiAgcmV0dXJuIGhhc2goc2VyaWFsaXplU3luYyhpbnB1dCksICdzaGE1MTInKTtcbn1cblxuLy8gUHJvbWlzaWZ5IHRoaXMgbGlicmFyeVxuY29uc3QgcHJvbWlzaWZpZWQgPSBQcm9taXNlLnByb21pc2lmeUFsbCh7IG5vcm1hbGl6ZSwgc3RyaW5naWZ5LCBtZDUsIHNoYTI1Niwgc2hhNTEyIH0pO1xuXG5PYmplY3QuYXNzaWduKGV4cG9ydHMsIHByb21pc2lmaWVkKTtcbmV4cG9ydCBkZWZhdWx0IGV4cG9ydHM7XG4iXX0=